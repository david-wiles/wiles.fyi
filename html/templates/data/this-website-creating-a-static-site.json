{
  "title": "This Website: Creating a Static Site",
  "date": "September 24th, 2020",
  "description": "How it's made: this website",
  "preview": "When I started working on what I thought would be my blog, I thought that it would be easy to create a static website.\n  After all, it’s just HTML, right? The first iteration of my blog turned out to be a flop, as did the second and third.\n  Although a static website is just HTML (and CSS and JS), there are plenty of other considerations going into design\n  and architecture decisions that I didn’t anticipate.\n",
  "html": "<p>\n  When I started working on what I thought would be my blog, I thought that it would be easy to create a static website.\n  After all, it’s just HTML, right? The first iteration of my blog turned out to be a flop, as did the second and third.\n  Although a static website is just HTML (and CSS and JS), there are plenty of other considerations going into design\n  and architecture decisions that I didn’t anticipate.\n</p>\n\n<h2>\n  Frameworks\n</h2>\n\n<p>\n  Static websites are as old as the internet (well, almost), so the concepts of static site generators and file servers\n  are old hat. Nothing new under the sun. Today, there are plenty of fantastic and robust frameworks to choose from.\n  Hugo, Jekyll, Gatsby, and Eleventy are some of the more popular ones today. The concept behind them is to take HTML\n  templates and data to stay true to the DRY principle in software development. Although I finally decided to use my own\n  custom static site generator called cmd-cv, these existing frameworks helped me when developing my own\n</p>\n\n<h2>\n  CMD-CV\n</h2>\n\n<p>\n  CMD-CV (named for copy-paste, which is essentially what the program does) is my very own static site generator. It\n  consumes partial HTML templates and JSON data and combines them into a single HTML file. It works just like any other\n  templating engine; mine is different due to how little it actually does. The program can do three things:\n</p>\n\n<ul>\n  <li>Copy an HTML template into another one by replacing placeholder syntax</li>\n  <li>Copy an HTML template into a layout (basically the same as the first one, but in the other direction)</li>\n  <li>Replace placeholder syntax with data from a JSON file</li>\n</ul>\n\n<p>\n  That’s it. My site is very simple, so I don’t need any complex transformations of the text.\n</p>\n\n<p>\n  Although I’m sure that someone proficient in a modern framework like Hugo could produce a better product in a smaller\n  amount of time, I feel like it would be overkill for my needs. In fact, the amount of time it took me to write the\n  site generator was similar to the time it would have taken me to learn Hugo (or any other framework) well enough to\n  produce the same product. Although you could argue that it would be better to use a well-tested framework (and you\n  would be right), I think that there is more experience to gain and joy to be had from creating a software project and\n  using it.\n</p>\n\n<h2>\n  Hosting\n</h2>\n\n<p>\n  There has been an explosion in the number of cloud service providers in the past few years. Choosing between AWS, GCP,\n  Azure, or some other service seemed like a matter of guessing at first. The big three are essentially identical,\n  especially for my needs. I actually ended up going with “other”, which turned out to be Render.\n</p>\n\n<p>\n  Initially I chose Google Cloud Platform. The deciding factors were very minor: I bought my domain from Google and\n  their tutorial was easy to follow. Unfortunately, GCP is somewhat overkill for my needs right now. The total cost for\n  minor traffic (just me) was about $0.60 per day. Not much, but that adds up to nearly $20 per month, which was more\n  than I wanted to spend at this point. After doing some quick Googling, I found out about another cloud service\n  provider called Render, which sounded especially appealing.\n</p>\n\n<p>\n  If you haven’t heard of Render, it’s a (yet another) cloud hosting service. They offer many of the same services that\n  Heroku or Digital Ocean offer, but their static website offering had many perks that the others didn’t. They issue and\n  manage SSL certificates, use HTTP/2 by default, automatically deploy from GitHub using any script you want, and best\n  of all, it’s FREE!\n</p>\n",
  "href": "/blog/this-website-creating-a-static-site.html"
}
